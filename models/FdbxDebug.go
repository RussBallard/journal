// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FdbxDebugT struct {
	Name string
	Text string
}

func (t *FdbxDebugT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	textOffset := builder.CreateString(t.Text)
	FdbxDebugStart(builder)
	FdbxDebugAddName(builder, nameOffset)
	FdbxDebugAddText(builder, textOffset)
	return FdbxDebugEnd(builder)
}

func (rcv *FdbxDebug) UnPackTo(t *FdbxDebugT) {
	t.Name = string(rcv.Name())
	t.Text = string(rcv.Text())
}

func (rcv *FdbxDebug) UnPack() *FdbxDebugT {
	if rcv == nil { return nil }
	t := &FdbxDebugT{}
	rcv.UnPackTo(t)
	return t
}

type FdbxDebug struct {
	_tab flatbuffers.Table
}

func GetRootAsFdbxDebug(buf []byte, offset flatbuffers.UOffsetT) *FdbxDebug {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FdbxDebug{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FdbxDebug) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FdbxDebug) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FdbxDebug) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxDebug) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FdbxDebugStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FdbxDebugAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func FdbxDebugAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func FdbxDebugEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
