// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FdbxStepT struct {
	Text string
	Detail string
	Stack []string
	Debug []*FdbxDebugT
}

func (t *FdbxStepT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	textOffset := builder.CreateString(t.Text)
	detailOffset := builder.CreateString(t.Detail)
	stackOffset := flatbuffers.UOffsetT(0)
	if t.Stack != nil {
		stackLength := len(t.Stack)
		stackOffsets := make([]flatbuffers.UOffsetT, stackLength)
		for j := 0; j < stackLength; j++ {
			stackOffsets[j] = builder.CreateString(t.Stack[j])
		}
		FdbxStepStartStackVector(builder, stackLength)
		for j := stackLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stackOffsets[j])
		}
		stackOffset = builder.EndVector(stackLength)
	}
	debugOffset := flatbuffers.UOffsetT(0)
	if t.Debug != nil {
		debugLength := len(t.Debug)
		debugOffsets := make([]flatbuffers.UOffsetT, debugLength)
		for j := 0; j < debugLength; j++ {
			debugOffsets[j] = t.Debug[j].Pack(builder)
		}
		FdbxStepStartDebugVector(builder, debugLength)
		for j := debugLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(debugOffsets[j])
		}
		debugOffset = builder.EndVector(debugLength)
	}
	FdbxStepStart(builder)
	FdbxStepAddText(builder, textOffset)
	FdbxStepAddDetail(builder, detailOffset)
	FdbxStepAddStack(builder, stackOffset)
	FdbxStepAddDebug(builder, debugOffset)
	return FdbxStepEnd(builder)
}

func (rcv *FdbxStep) UnPackTo(t *FdbxStepT) {
	t.Text = string(rcv.Text())
	t.Detail = string(rcv.Detail())
	stackLength := rcv.StackLength()
	t.Stack = make([]string, stackLength)
	for j := 0; j < stackLength; j++ {
		t.Stack[j] = string(rcv.Stack(j))
	}
	debugLength := rcv.DebugLength()
	t.Debug = make([]*FdbxDebugT, debugLength)
	for j := 0; j < debugLength; j++ {
		x := FdbxDebug{}
		rcv.Debug(&x, j)
		t.Debug[j] = x.UnPack()
	}
}

func (rcv *FdbxStep) UnPack() *FdbxStepT {
	if rcv == nil { return nil }
	t := &FdbxStepT{}
	rcv.UnPackTo(t)
	return t
}

type FdbxStep struct {
	_tab flatbuffers.Table
}

func GetRootAsFdbxStep(buf []byte, offset flatbuffers.UOffsetT) *FdbxStep {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FdbxStep{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FdbxStep) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FdbxStep) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FdbxStep) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxStep) Detail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxStep) Stack(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *FdbxStep) StackLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FdbxStep) Debug(obj *FdbxDebug, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FdbxStep) DebugLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FdbxStepStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FdbxStepAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func FdbxStepAddDetail(builder *flatbuffers.Builder, detail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(detail), 0)
}
func FdbxStepAddStack(builder *flatbuffers.Builder, stack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stack), 0)
}
func FdbxStepStartStackVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FdbxStepAddDebug(builder *flatbuffers.Builder, debug flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(debug), 0)
}
func FdbxStepStartDebugVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FdbxStepEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
