// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FdbxCrashT struct {
	Code    string
	Link    string
	Title   string
	Status  uint16
	Created int64
	Steps   []*FdbxStepT
	Debug   []*FdbxDebugT
}

func (t *FdbxCrashT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	codeOffset := builder.CreateString(t.Code)
	linkOffset := builder.CreateString(t.Link)
	titleOffset := builder.CreateString(t.Title)
	stepsOffset := flatbuffers.UOffsetT(0)
	if t.Steps != nil {
		stepsLength := len(t.Steps)
		stepsOffsets := make([]flatbuffers.UOffsetT, stepsLength)
		for j := 0; j < stepsLength; j++ {
			stepsOffsets[j] = t.Steps[j].Pack(builder)
		}
		FdbxCrashStartStepsVector(builder, stepsLength)
		for j := stepsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stepsOffsets[j])
		}
		stepsOffset = builder.EndVector(stepsLength)
	}
	debugOffset := flatbuffers.UOffsetT(0)
	if t.Debug != nil {
		debugLength := len(t.Debug)
		debugOffsets := make([]flatbuffers.UOffsetT, debugLength)
		for j := 0; j < debugLength; j++ {
			debugOffsets[j] = t.Debug[j].Pack(builder)
		}
		FdbxCrashStartDebugVector(builder, debugLength)
		for j := debugLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(debugOffsets[j])
		}
		debugOffset = builder.EndVector(debugLength)
	}
	FdbxCrashStart(builder)
	FdbxCrashAddCode(builder, codeOffset)
	FdbxCrashAddLink(builder, linkOffset)
	FdbxCrashAddTitle(builder, titleOffset)
	FdbxCrashAddStatus(builder, t.Status)
	FdbxCrashAddCreated(builder, t.Created)
	FdbxCrashAddSteps(builder, stepsOffset)
	FdbxCrashAddDebug(builder, debugOffset)
	return FdbxCrashEnd(builder)
}

func (rcv *FdbxCrash) UnPackTo(t *FdbxCrashT) {
	t.Code = string(rcv.Code())
	t.Link = string(rcv.Link())
	t.Title = string(rcv.Title())
	t.Status = rcv.Status()
	t.Created = rcv.Created()
	stepsLength := rcv.StepsLength()
	t.Steps = make([]*FdbxStepT, stepsLength)
	for j := 0; j < stepsLength; j++ {
		x := FdbxStep{}
		rcv.Steps(&x, j)
		t.Steps[j] = x.UnPack()
	}
	debugLength := rcv.DebugLength()
	t.Debug = make([]*FdbxDebugT, debugLength)
	for j := 0; j < debugLength; j++ {
		x := FdbxDebug{}
		rcv.Debug(&x, j)
		t.Debug[j] = x.UnPack()
	}
}

func (rcv *FdbxCrash) UnPack() *FdbxCrashT {
	if rcv == nil {
		return nil
	}
	t := &FdbxCrashT{}
	rcv.UnPackTo(t)
	return t
}

type FdbxCrash struct {
	_tab flatbuffers.Table
}

func GetRootAsFdbxCrash(buf []byte, offset flatbuffers.UOffsetT) *FdbxCrash {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FdbxCrash{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FdbxCrash) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FdbxCrash) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FdbxCrash) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxCrash) Link() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxCrash) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FdbxCrash) Status() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FdbxCrash) MutateStatus(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *FdbxCrash) Created() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FdbxCrash) MutateCreated(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *FdbxCrash) Steps(obj *FdbxStep, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FdbxCrash) StepsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FdbxCrash) Debug(obj *FdbxDebug, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FdbxCrash) DebugLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FdbxCrashStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func FdbxCrashAddCode(builder *flatbuffers.Builder, code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(code), 0)
}
func FdbxCrashAddLink(builder *flatbuffers.Builder, link flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(link), 0)
}
func FdbxCrashAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(title), 0)
}
func FdbxCrashAddStatus(builder *flatbuffers.Builder, status uint16) {
	builder.PrependUint16Slot(3, status, 0)
}
func FdbxCrashAddCreated(builder *flatbuffers.Builder, created int64) {
	builder.PrependInt64Slot(4, created, 0)
}
func FdbxCrashAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(steps), 0)
}
func FdbxCrashStartStepsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FdbxCrashAddDebug(builder *flatbuffers.Builder, debug flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(debug), 0)
}
func FdbxCrashStartDebugVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FdbxCrashEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
