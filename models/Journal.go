// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type JournalT struct {
	ID []byte
	Start uint64
	Total uint64
	Chain []*StageT
	Service string
}

func (t *JournalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	IDOffset := flatbuffers.UOffsetT(0)
	if t.ID != nil {
		IDOffset = builder.CreateByteString(t.ID)
	}
	ChainOffset := flatbuffers.UOffsetT(0)
	if t.Chain != nil {
		ChainLength := len(t.Chain)
		ChainOffsets := make([]flatbuffers.UOffsetT, ChainLength)
		for j := 0; j < ChainLength; j++ {
			ChainOffsets[j] = t.Chain[j].Pack(builder)
		}
		JournalStartChainVector(builder, ChainLength)
		for j := ChainLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ChainOffsets[j])
		}
		ChainOffset = builder.EndVector(ChainLength)
	}
	ServiceOffset := builder.CreateString(t.Service)
	JournalStart(builder)
	JournalAddID(builder, IDOffset)
	JournalAddStart(builder, t.Start)
	JournalAddTotal(builder, t.Total)
	JournalAddChain(builder, ChainOffset)
	JournalAddService(builder, ServiceOffset)
	return JournalEnd(builder)
}

func (rcv *Journal) UnPackTo(t *JournalT) {
	t.ID = rcv.IDBytes()
	t.Start = rcv.Start()
	t.Total = rcv.Total()
	ChainLength := rcv.ChainLength()
	t.Chain = make([]*StageT, ChainLength)
	for j := 0; j < ChainLength; j++ {
		x := Stage{}
		rcv.Chain(&x, j)
		t.Chain[j] = x.UnPack()
	}
	t.Service = string(rcv.Service())
}

func (rcv *Journal) UnPack() *JournalT {
	if rcv == nil { return nil }
	t := &JournalT{}
	rcv.UnPackTo(t)
	return t
}

type Journal struct {
	_tab flatbuffers.Table
}

func GetRootAsJournal(buf []byte, offset flatbuffers.UOffsetT) *Journal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Journal{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Journal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Journal) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Journal) ID(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Journal) IDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Journal) IDBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Journal) MutateID(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Journal) Start() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Journal) MutateStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Journal) Total() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Journal) MutateTotal(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Journal) Chain(obj *Stage, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Journal) ChainLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Journal) Service() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func JournalStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func JournalAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func JournalStartIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func JournalAddStart(builder *flatbuffers.Builder, Start uint64) {
	builder.PrependUint64Slot(1, Start, 0)
}
func JournalAddTotal(builder *flatbuffers.Builder, Total uint64) {
	builder.PrependUint64Slot(2, Total, 0)
}
func JournalAddChain(builder *flatbuffers.Builder, Chain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Chain), 0)
}
func JournalStartChainVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func JournalAddService(builder *flatbuffers.Builder, Service flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(Service), 0)
}
func JournalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
